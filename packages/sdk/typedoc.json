{
	"id": 0,
	"name": "datocms-plugins-sdk",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1,
			"name": "Account",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "DatoCMS account",
				"text": "This interface was referenced by `DatoCMSSiteAPI`'s JSON-Schema\nvia the `definition` \"account\".\n"
			},
			"children": [
				{
					"id": 4,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2453,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "AccountAttributes"
					}
				},
				{
					"id": 3,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2452,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2451,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "account"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						4,
						3,
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "SiteApiSchema.ts",
					"line": 2450,
					"character": 17
				}
			]
		},
		{
			"id": 5,
			"name": "Field",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Each Model consists of a set of fields. Using the database metaphore, fields are like table columns, and when creating them you need to specify their type (`string`, `file`, `float`, etc.) and any required validation.",
				"text": "This interface was referenced by `DatoCMSSiteAPI`'s JSON-Schema\nvia the `definition` \"field\".\n"
			},
			"children": [
				{
					"id": 8,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 3327,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldAttributes"
					}
				},
				{
					"id": 7,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 3326,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 9,
					"name": "relationships",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 3328,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldRelationships"
					}
				},
				{
					"id": 6,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 3325,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "field"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						8,
						7,
						9,
						6
					]
				}
			],
			"sources": [
				{
					"fileName": "SiteApiSchema.ts",
					"line": 3324,
					"character": 17
				}
			]
		},
		{
			"id": 10,
			"name": "Item",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "DatoCMS stores the individual pieces of content you create from a model as records, which are much like table rows in a database. For backward-compatibility reasons, the API refers to records as \"items\".",
				"text": "This interface was referenced by `DatoCMSSiteAPI`'s JSON-Schema\nvia the `definition` \"item\".\n"
			},
			"children": [
				{
					"id": 13,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 4705,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ItemAttributes"
					}
				},
				{
					"id": 12,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 4704,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 15,
					"name": "meta",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 4707,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ItemMeta"
					}
				},
				{
					"id": 14,
					"name": "relationships",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 4706,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ItemRelationships"
					}
				},
				{
					"id": 11,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 4703,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "item"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						13,
						12,
						15,
						14,
						11
					]
				}
			],
			"sources": [
				{
					"fileName": "SiteApiSchema.ts",
					"line": 4702,
					"character": 17
				}
			]
		},
		{
			"id": 16,
			"name": "ModelBlock",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The way you define the kind of content you can edit inside your administrative area passes through the concept of Models, which are much like database tables. For backward-compatibility reasons, the API refers to models as \"item types\".",
				"text": "This interface was referenced by `DatoCMSSiteAPI`'s JSON-Schema\nvia the `definition` \"item_type\".\n"
			},
			"children": [
				{
					"id": 19,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2931,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ItemTypeAttributes"
					}
				},
				{
					"id": 18,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2930,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 20,
					"name": "relationships",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2932,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ItemTypeRelationships"
					}
				},
				{
					"id": 17,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2929,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "item_type"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						19,
						18,
						20,
						17
					]
				}
			],
			"sources": [
				{
					"fileName": "SiteApiSchema.ts",
					"line": 2928,
					"character": 17
				}
			]
		},
		{
			"id": 21,
			"name": "Plugin",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Plugins enable developers to replace DatoCMS field components with HTML5 applications so the editing experiences of the DatoCMS web app can be customized.",
				"text": "This interface was referenced by `DatoCMSSiteAPI`'s JSON-Schema\nvia the `definition` \"plugin\".\n"
			},
			"children": [
				{
					"id": 24,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 4221,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "PluginAttributes"
					}
				},
				{
					"id": 23,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 4220,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 25,
					"name": "meta",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 4222,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "PluginMeta"
					}
				},
				{
					"id": 22,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 4219,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "plugin"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						24,
						23,
						25,
						22
					]
				}
			],
			"sources": [
				{
					"fileName": "SiteApiSchema.ts",
					"line": 4218,
					"character": 17
				}
			]
		},
		{
			"id": 46,
			"name": "Role",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "A Role represents a specific set of actions an editor (or an API token) can perform on your administrative area.",
				"text": "This interface was referenced by `DatoCMSSiteAPI`'s JSON-Schema\nvia the `definition` \"role\".\n"
			},
			"children": [
				{
					"id": 49,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 1117,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "RoleAttributes"
					}
				},
				{
					"id": 48,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 1116,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 51,
					"name": "meta",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 1119,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "RoleMeta"
					}
				},
				{
					"id": 50,
					"name": "relationships",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 1118,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "RoleRelationships"
					}
				},
				{
					"id": 47,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 1115,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "role"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						49,
						48,
						51,
						50,
						47
					]
				}
			],
			"sources": [
				{
					"fileName": "SiteApiSchema.ts",
					"line": 1114,
					"character": 17
				}
			]
		},
		{
			"id": 26,
			"name": "Site",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "A site represents a specific DatoCMS administrative area",
				"text": "This interface was referenced by `DatoCMSSiteAPI`'s JSON-Schema\nvia the `definition` \"site\".\n"
			},
			"children": [
				{
					"id": 29,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 8003,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "SiteAttributes"
					}
				},
				{
					"id": 28,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 8002,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 30,
					"name": "relationships",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 8004,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "SiteRelationships"
					}
				},
				{
					"id": 27,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 8001,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "site"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						29,
						28,
						30,
						27
					]
				}
			],
			"sources": [
				{
					"fileName": "SiteApiSchema.ts",
					"line": 8000,
					"character": 17
				}
			]
		},
		{
			"id": 31,
			"name": "SsoUser",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "A Single Sign-On user exists when a DatoCMS project is connected to an external Identity Provider. An SSO user will not use the standard login procedure but has to go through SAML authentication. It can also be linked to one or more IdP groups.",
				"text": "This interface was referenced by `DatoCMSSiteAPI`'s JSON-Schema\nvia the `definition` \"sso_user\".\n"
			},
			"children": [
				{
					"id": 34,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2179,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "SsoUserAttributes"
					}
				},
				{
					"id": 33,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2178,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 35,
					"name": "relationships",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2180,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "SsoUserRelationships"
					}
				},
				{
					"id": 32,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2177,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "sso_user"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						34,
						33,
						35,
						32
					]
				}
			],
			"sources": [
				{
					"fileName": "SiteApiSchema.ts",
					"line": 2176,
					"character": 17
				}
			]
		},
		{
			"id": 36,
			"name": "Upload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Every file you upload to DatoCMS will be retrievable from this endpoint.",
				"text": "This interface was referenced by `DatoCMSSiteAPI`'s JSON-Schema\nvia the `definition` \"upload\".\n"
			},
			"children": [
				{
					"id": 39,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 5385,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "UploadAttributes"
					}
				},
				{
					"id": 38,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 5384,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 40,
					"name": "relationships",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 5386,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "UploadRelationships"
					}
				},
				{
					"id": 37,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 5383,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "upload"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						39,
						38,
						40,
						37
					]
				}
			],
			"sources": [
				{
					"fileName": "SiteApiSchema.ts",
					"line": 5382,
					"character": 17
				}
			]
		},
		{
			"id": 41,
			"name": "User",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "A DatoCMS administrative area can be accessed by multiple people. Every collaborator is linked to a specific Role, which describes what actions it will be able to perform once logged in.",
				"text": "This interface was referenced by `DatoCMSSiteAPI`'s JSON-Schema\nvia the `definition` \"user\".\n"
			},
			"children": [
				{
					"id": 44,
					"name": "attributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2067,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "UserAttributes"
					}
				},
				{
					"id": 43,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2066,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 45,
					"name": "relationships",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2068,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "UserRelationships"
					}
				},
				{
					"id": 42,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "SiteApiSchema.ts",
							"line": 2065,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "user"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						44,
						43,
						45,
						42
					]
				}
			],
			"sources": [
				{
					"fileName": "SiteApiSchema.ts",
					"line": 2064,
					"character": 17
				}
			]
		},
		{
			"id": 172,
			"name": "AddonOverride",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A field addon extension forced on a field"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 184,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 173,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 174,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "ID of field extension. Will be the first argument for the `renderFieldExtension` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 186,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 177,
							"name": "initialHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The initial height to set for the iframe that will render the field extension"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 192,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 175,
							"name": "parameters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An arbitrary configuration object that will be passed as the `parameters` property of the second argument of the `renderFieldExtension` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 188,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 176,
							"name": "rank",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If multiple addons are present for a field, they will be sorted by ascending `rank`. If you want to specify an explicit value for `rank`, make sure to offer a way for final users to customize it inside the plugin's settings form, otherwise the hardcoded value you choose might clash with the one of another plugin!"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 190,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								174,
								177,
								175,
								176
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 184,
							"character": 28
						}
					]
				}
			}
		},
		{
			"id": 230,
			"name": "CommonMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 294,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 231,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 237,
							"name": "currentAccessToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The access token to perform API calls on behalf of the current user"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 306,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 236,
							"name": "currentRole",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The role for the current DatoCMS user"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 304,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 46,
								"name": "Role"
							}
						},
						{
							"id": 235,
							"name": "currentUser",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The current DatoCMS user. It can either be the owner or one of the collaborators (regular or SSO)."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 302,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 41,
										"name": "User"
									},
									{
										"type": "reference",
										"id": 31,
										"name": "SsoUser"
									},
									{
										"type": "reference",
										"id": 1,
										"name": "Account"
									}
								]
							}
						},
						{
							"id": 233,
							"name": "environment",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ID of the current environment"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 298,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 234,
							"name": "itemTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "All the models of the current DatoCMS project, indexed by ID"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 300,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 16,
												"name": "ModelBlock"
											}
										],
										"name": "Record"
									}
								],
								"name": "Partial"
							}
						},
						{
							"id": 238,
							"name": "plugin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The current plugin"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 308,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 21,
								"name": "Plugin"
							}
						},
						{
							"id": 232,
							"name": "site",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The current DatoCMS project"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 296,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 26,
								"name": "Site"
							}
						},
						{
							"id": 239,
							"name": "ui",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "UI preferences of the current user"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 310,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 240,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 241,
											"name": "locale",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Preferred locale"
											},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 312,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												241
											]
										}
									],
									"sources": [
										{
											"fileName": "types.ts",
											"line": 310,
											"character": 6
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								237,
								236,
								235,
								233,
								234,
								238,
								232,
								239
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 294,
							"character": 25
						}
					]
				}
			}
		},
		{
			"id": 333,
			"name": "CommonRenderItemFormMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 417,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 257,
						"name": "CommonRenderMeta"
					},
					{
						"type": "reference",
						"id": 324,
						"name": "CommonRenderItemFormMetaAdditions"
					}
				]
			}
		},
		{
			"id": 324,
			"name": "CommonRenderItemFormMetaAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 400,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 325,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 329,
							"name": "formValues",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The complete internal form state"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 408,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 332,
							"name": "isFormDirty",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether the form has some non-persisted changes or not"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 414,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 331,
							"name": "isSubmitting",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether the form is currently submitting itself or not"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 412,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 327,
							"name": "item",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If an already persisted record is being edited, returns the full record entity"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 404,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 10,
										"name": "Item"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 330,
							"name": "itemStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The current status of the record being edited"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 410,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "new"
									},
									{
										"type": "literal",
										"value": "draft"
									},
									{
										"type": "literal",
										"value": "updated"
									},
									{
										"type": "literal",
										"value": "published"
									}
								]
							}
						},
						{
							"id": 328,
							"name": "itemType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The model for the record being edited"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 406,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 16,
								"name": "ModelBlock"
							}
						},
						{
							"id": 326,
							"name": "locale",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The currently active locale for the record"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 402,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								329,
								332,
								331,
								327,
								330,
								328,
								326
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 400,
							"character": 48
						}
					]
				}
			}
		},
		{
			"id": 354,
			"name": "CommonRenderItemFormMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 432,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 258,
						"name": "CommonRenderMethods"
					},
					{
						"type": "reference",
						"id": 334,
						"name": "CommonRenderItemFormMethodsAdditions"
					}
				]
			}
		},
		{
			"id": 334,
			"name": "CommonRenderItemFormMethodsAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 419,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 335,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 340,
							"name": "disableField",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 341,
									"name": "disableField",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Disables/re-enables a specific field in the form"
									},
									"parameters": [
										{
											"id": 342,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 343,
											"name": "disable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 352,
							"name": "saveCurrentItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 353,
									"name": "saveCurrentItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Triggers a submit form for current record"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 344,
							"name": "scrollToField",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 345,
									"name": "scrollToField",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Smoothly navigates to a specific field in the form. If the field is localized it will switch language tab and then navigate to the chosen field."
									},
									"parameters": [
										{
											"id": 346,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 347,
											"name": "locale",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 348,
							"name": "setFieldValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 349,
									"name": "setFieldValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Changes a specific path of the `formValues` object"
									},
									"parameters": [
										{
											"id": 350,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 351,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 336,
							"name": "toggleField",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 337,
									"name": "toggleField",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Hides/shows a specific field in the form"
									},
									"parameters": [
										{
											"id": 338,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 339,
											"name": "show",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								340,
								352,
								344,
								348,
								336
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 419,
							"character": 51
						}
					]
				}
			}
		},
		{
			"id": 257,
			"name": "CommonRenderMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 339,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 230,
						"name": "CommonMeta"
					},
					{
						"type": "reference",
						"id": 250,
						"name": "CommonRenderMetaAdditions"
					}
				]
			}
		},
		{
			"id": 250,
			"name": "CommonRenderMetaAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 326,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 251,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 256,
							"name": "account",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The project owner"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 336,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Account"
							}
						},
						{
							"id": 252,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "All the fields currently loaded for the current DatoCMS project, indexed by ID. It will always contain the current model fields and all the fields of the blocks it might contain via Modular Content/Structured Text fields. If some fields you need are not present, use the `loadItemTypeFields` function to load them."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 328,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 5,
												"name": "Field"
											}
										],
										"name": "Record"
									}
								],
								"name": "Partial"
							}
						},
						{
							"id": 255,
							"name": "ssoUsers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "All the SSO users currently loaded for the current DatoCMS project, indexed by ID. It will always contain the current user. If some users you need are not present, use the `loadSsoUsers` function to load them."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 334,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 31,
												"name": "SsoUser"
											}
										],
										"name": "Record"
									}
								],
								"name": "Partial"
							}
						},
						{
							"id": 253,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An object containing the theme colors for the current DatoCMS project"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 330,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 182,
								"name": "Theme"
							}
						},
						{
							"id": 254,
							"name": "users",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "All the regular users currently loaded for the current DatoCMS project, indexed by ID. It will always contain the current user. If some users you need are not present, use the `loadUsers` function to load them."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 332,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 41,
												"name": "User"
											}
										],
										"name": "Record"
									}
								],
								"name": "Partial"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								256,
								252,
								255,
								253,
								254
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 326,
							"character": 40
						}
					]
				}
			}
		},
		{
			"id": 258,
			"name": "CommonRenderMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 341,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 259,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 290,
							"name": "alert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 291,
									"name": "alert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Triggers a UI-consistent alert toast displaying the selected message"
									},
									"parameters": [
										{
											"id": 292,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 273,
							"name": "createNewItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 274,
									"name": "createNewItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a dialog for creating a new record. It returns a promise resolved with the newly created record or `null` if the user closes the dialog without creating anything."
									},
									"parameters": [
										{
											"id": 275,
											"name": "itemTypeId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 10,
														"name": "Item"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 296,
							"name": "customToast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 297,
									"name": "customToast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Triggers a UI-consistent custom toast displaying the selected message (and a CTA)"
									},
									"typeParameter": [
										{
											"id": 298,
											"name": "CtaValue",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"default": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"parameters": [
										{
											"id": 299,
											"name": "toast",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 208,
												"typeArguments": [
													{
														"type": "reference",
														"id": 298,
														"name": "CtaValue"
													}
												],
												"name": "Toast"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 298,
														"name": "CtaValue"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 287,
							"name": "editItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 288,
									"name": "editItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a dialog for editing an existing record. It returns a promise resolved with the edited record, or `null` if the user closes the dialog without persisting any change."
									},
									"parameters": [
										{
											"id": 289,
											"name": "itemId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 10,
														"name": "Item"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 309,
							"name": "editUpload",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 310,
									"name": "editUpload",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a dialog for editing a Media Area asset. It returns a promise resolved with:",
										"text": "* the updated asset, if the user persists some changes to the asset itself\n* `null`, if the user closes the dialog without persisting any change\n* an asset structure with an additional `deleted` property set to true, if the user deletes the asset\n"
									},
									"parameters": [
										{
											"id": 311,
											"name": "uploadId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intersection",
														"types": [
															{
																"type": "reference",
																"id": 36,
																"name": "Upload"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 312,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 313,
																			"name": "deleted",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "types.ts",
																					"line": 386,
																					"character": 52
																				}
																			],
																			"type": {
																				"type": "literal",
																				"value": true
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				313
																			]
																		}
																	]
																}
															}
														]
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 314,
							"name": "editUploadMetadata",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 315,
									"name": "editUploadMetadata",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a dialog for editing a \"single asset\" field structure. It returns a promise resolved with the updated structure, or `null` if the user closes the dialog without persisting any change."
									},
									"parameters": [
										{
											"id": 316,
											"name": "fileFieldValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 193,
												"name": "FileFieldValue"
											}
										},
										{
											"id": 317,
											"name": "locale",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 193,
														"name": "FileFieldValue"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 266,
							"name": "loadItemTypeFields",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 267,
									"name": "loadItemTypeFields",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Loads all the fields for a specific model (or block). Fields will be returned and will also be available in the the `fields` property."
									},
									"parameters": [
										{
											"id": 268,
											"name": "itemTypeId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 5,
													"name": "Field"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 271,
							"name": "loadSsoUsers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 272,
									"name": "loadSsoUsers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Loads all SSO users. Users will be returned and will also be available in the the `ssoUsers` property."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 31,
													"name": "SsoUser"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 269,
							"name": "loadUsers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 270,
									"name": "loadUsers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Loads all regular users. Users will be returned and will also be available in the the `users` property."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 41,
													"name": "User"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 263,
							"name": "navigateTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 264,
									"name": "navigateTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the user to another URL internal to the backend"
									},
									"parameters": [
										{
											"id": 265,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 293,
							"name": "notice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 294,
									"name": "notice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Triggers a UI-consistent notice toast displaying the selected message"
									},
									"parameters": [
										{
											"id": 295,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 321,
							"name": "openConfirm",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 322,
									"name": "openConfirm",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a UI-consistent confirmation dialog. Returns a promise resolved with the value of the choice made by the user"
									},
									"parameters": [
										{
											"id": 323,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 224,
												"name": "ConfirmOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 318,
							"name": "openModal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 319,
									"name": "openModal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a custom modal. Returns a promise resolved with what the modal itself returns calling the `resolve()` function"
									},
									"parameters": [
										{
											"id": 320,
											"name": "modal",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 200,
												"name": "Modal"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 276,
							"name": "selectItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 277,
									"name": "selectItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a dialog for selecting multiple records from a list of existing records of type `itemTypeId`. It returns a promise resolved with an array of selected records, or `null` if the user closes the dialog without choosing any record."
									},
									"parameters": [
										{
											"id": 278,
											"name": "itemTypeId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 279,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 280,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 281,
															"name": "multiple",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "types.ts",
																	"line": 358,
																	"character": 6
																}
															],
															"type": {
																"type": "literal",
																"value": true
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																281
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 10,
															"name": "Item"
														}
													}
												]
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 282,
									"name": "selectItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a dialog for selecting one record from a list of existing records of type `itemTypeId`. It returns a promise resolved with the selected record, or `null` if the user closes the dialog without choosing any record."
									},
									"parameters": [
										{
											"id": 283,
											"name": "itemTypeId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 284,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 285,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 286,
															"name": "multiple",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "types.ts",
																	"line": 365,
																	"character": 6
																}
															],
															"type": {
																"type": "literal",
																"value": false
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																286
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 10,
														"name": "Item"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 300,
							"name": "selectUpload",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 301,
									"name": "selectUpload",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a dialog for selecting multiple existing assets. It returns a promise resolved with an array of selected assets, or `null` if the user closes the dialog without selecting any upload."
									},
									"parameters": [
										{
											"id": 302,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 303,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 304,
															"name": "multiple",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "types.ts",
																	"line": 377,
																	"character": 26
																}
															],
															"type": {
																"type": "literal",
																"value": true
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																304
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 36,
															"name": "Upload"
														}
													}
												]
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 305,
									"name": "selectUpload",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens a dialog for selecting an existing asset. It returns a promise resolved with the selected asset, or `null` if the user closes the dialog without selecting any upload."
									},
									"parameters": [
										{
											"id": 306,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 307,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 308,
															"name": "multiple",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "types.ts",
																	"line": 379,
																	"character": 27
																}
															],
															"type": {
																"type": "literal",
																"value": false
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																308
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 36,
														"name": "Upload"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 260,
							"name": "setHeight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 261,
									"name": "setHeight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the height for the iframe"
									},
									"parameters": [
										{
											"id": 262,
											"name": "number",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								290,
								273,
								296,
								287,
								309,
								314,
								266,
								271,
								269,
								263,
								293,
								321,
								318,
								276,
								300,
								260
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 341,
							"character": 34
						}
					]
				}
			}
		},
		{
			"id": 219,
			"name": "ConfirmChoice",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A choice presented in a `openConfirm` pane"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 273,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 220,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 223,
							"name": "intent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The intent of the button. Will present the button in a different color accent."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 279,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "positive"
									},
									{
										"type": "literal",
										"value": "negative"
									}
								]
							}
						},
						{
							"id": 221,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The label to be shown for the choice"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 275,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 222,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The value to be returned by the `openConfirm` promise if the button is clicked by the user"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 277,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								223,
								221,
								222
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 273,
							"character": 28
						}
					]
				}
			}
		},
		{
			"id": 224,
			"name": "ConfirmOptions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Options for the `openConfirm` function"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 283,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 225,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 229,
							"name": "cancel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The cancel option to present to the user"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 291,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 219,
								"name": "ConfirmChoice"
							}
						},
						{
							"id": 228,
							"name": "choices",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The different options the user can choose from"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 289,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 219,
									"name": "ConfirmChoice"
								}
							}
						},
						{
							"id": 227,
							"name": "content",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The main message to be shown inside the confirmation pane"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 287,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 226,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The title to be shown inside the confirmation pane"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 285,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								229,
								228,
								227,
								226
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 283,
							"character": 29
						}
					]
				}
			}
		},
		{
			"id": 136,
			"name": "ContentAreaSidebarItem",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "The sidebar in the Content Area presents a number of user-defined menu-items. This object represents a new item to be added in the sidebar."
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 98,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 137,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 139,
							"name": "icon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "FontAwesome icon name to be shown alongside the label"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 102,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 138,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Label to be shown. Must be unique."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 100,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 143,
							"name": "placement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Expresses where you want the item to be placed inside the sidebar. If not specified, the item will be placed after the standard items provided by DatoCMS itself."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 108,
									"character": 2
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "before"
											},
											{
												"type": "literal",
												"value": "after"
											}
										]
									},
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "menuItems"
											},
											{
												"type": "literal",
												"value": "settings"
											}
										]
									}
								]
							}
						},
						{
							"id": 140,
							"name": "pointsTo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "ID of the page linked to the item"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 104,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 141,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 142,
											"name": "pageId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 105,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												142
											]
										}
									],
									"sources": [
										{
											"fileName": "types.ts",
											"line": 104,
											"character": 13
										}
									]
								}
							}
						},
						{
							"id": 144,
							"name": "rank",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If different plugins specify the same placement for their sections, they will be displayed by ascending `rank`. If you want to specify an explicit value for `rank`, make sure to offer a way for final users to customize it inside the plugin's settings form, otherwise the hardcoded value you choose might clash with the one of another plugin!"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 110,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								139,
								138,
								143,
								140,
								144
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 98,
							"character": 37
						}
					]
				}
			}
		},
		{
			"id": 164,
			"name": "EditorOverride",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A field editor/sidebar forced on a field"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 163,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 165,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 166,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "ID of field extension. Will be the first argument for the `renderFieldExtension` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 165,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 171,
							"name": "initialHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The initial height to set for the iframe that will render the field extension"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 180,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 168,
							"name": "parameters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An arbitrary configuration object that will be passed as the `parameters` property of the second argument of the `renderFieldExtension` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 174,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 170,
							"name": "rank",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If multiple plugins ovverride a field, the one with the highest `rank` will win. If you want to specify an explicit value for `rank`, make sure to offer a way for final users to customize it inside the plugin's settings form, otherwise the hardcoded value you choose might clash with the one of another plugin!"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 178,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 169,
							"name": "startOpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "For `sidebar` extensions only: whether the sidebar pane will start open or collapsed"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 176,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 167,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Type of field extension.",
								"text": "* `field_editor` extensions replace the default field editor that DatoCMS provides\n* `sidebar` extensions move the field on the sidebar of the record editing page\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 172,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "field_editor"
									},
									{
										"type": "literal",
										"value": "sidebar"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								166,
								171,
								168,
								170,
								169,
								167
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 163,
							"character": 29
						}
					]
				}
			}
		},
		{
			"id": 146,
			"name": "FieldExtension",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Field extensions extend the basic functionality of DatoCMS when it comes to presenting record's fields to the final editor. Depending on the extension type (`field_editor`, `field_addon` or `sidebar`) they will be shown in different places of the interface."
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 121,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 147,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 152,
							"name": "configurable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether this field extension needs some configuration options before being installed in a field or not. Will trigger the `renderManualFieldExtensionParametersForm` and `validateManualFieldExtensionParameters` methods"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 137,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 151,
							"name": "fieldTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The type of fields that the field extension in compatible with"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 135,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "field_types"
										},
										"objectType": {
											"type": "reference",
											"name": "PluginAttributes"
										}
									}
								],
								"name": "NonNullable"
							}
						},
						{
							"id": 148,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "ID of field extension. Will be the first argument for the `renderFieldExtension` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 123,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 155,
							"name": "initialHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The initial height to set for the iframe that will render the field extension"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 143,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 149,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Name to be shown when editing fields"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 125,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 154,
							"name": "rank",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "For `sidebar` and `field_addon` extensions only: if multiple field extensions are present for a field, they will be sorted by ascending `rank`. If you want to specify an explicit value for `rank`, make sure to offer a way for final users to customize it inside the plugin's settings form, otherwise the hardcoded value you choose might clash with the one of another plugin!"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 141,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 153,
							"name": "startOpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "For `sidebar` extensions only: whether the sidebar pane will start open or collapsed"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 139,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 150,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Type of field extension.",
								"text": "* `field_editor` extensions replace the default field editor that DatoCMS provides\n* `field_addon` extensions are placed underneath the field editor to provide additional info/behaviour. You can setup multiple field addons for every field\n* `sidebar` extensions move the field on the sidebar of the record editing page\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 133,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 145,
								"name": "FieldExtensionType"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								152,
								151,
								148,
								155,
								149,
								154,
								153,
								150
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 121,
							"character": 29
						}
					]
				}
			}
		},
		{
			"id": 178,
			"name": "FieldExtensionOverride",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "An object expressing some field extensions you want to force on a particular field"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 196,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 179,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 181,
							"name": "addons",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "One or more field sidebar extensions to forcefully add to a field"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 200,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 172,
									"name": "AddonOverride"
								}
							}
						},
						{
							"id": 180,
							"name": "editor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Force a field editor/sidebar extension on a field"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 198,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 164,
								"name": "EditorOverride"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								181,
								180
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 196,
							"character": 37
						}
					]
				}
			}
		},
		{
			"id": 145,
			"name": "FieldExtensionType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 118,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "field_editor"
					},
					{
						"type": "literal",
						"value": "field_addon"
					},
					{
						"type": "literal",
						"value": "sidebar"
					}
				]
			}
		},
		{
			"id": 56,
			"name": "FieldInitCtx",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "connect.ts",
					"line": 48,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 450,
						"name": "InitMetaAndMethods"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 57,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 58,
									"name": "itemType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "connect.ts",
											"line": 48,
											"character": 50
										}
									],
									"type": {
										"type": "reference",
										"id": 16,
										"name": "ModelBlock"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										58
									]
								}
							],
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 48,
									"character": 48
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 437,
			"name": "FieldSetupMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 555,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 245,
						"name": "InitMeta"
					},
					{
						"type": "reference",
						"id": 433,
						"name": "FieldSetupMetaAdditions"
					}
				]
			}
		},
		{
			"id": 433,
			"name": "FieldSetupMetaAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 549,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 434,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 436,
							"name": "itemType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The model/block model for the field"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 552,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 16,
								"name": "ModelBlock"
							}
						},
						{
							"id": 435,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 550,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "init"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								436,
								435
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 549,
							"character": 38
						}
					]
				}
			}
		},
		{
			"id": 193,
			"name": "FileFieldValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "The structure contained in a \"single asset\" field"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 221,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 194,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 196,
							"name": "alt",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Alternate text for the asset"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 226,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 199,
							"name": "custom_data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Object with arbitrary metadata related to the asset"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 234,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 198,
							"name": "focal_point",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Focal point of an asset"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 231,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 189,
										"name": "FocalPoint"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 197,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Title for the asset"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 228,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 195,
							"name": "upload_id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "ID of the asset"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 224,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								196,
								199,
								198,
								197,
								195
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 221,
							"character": 29
						}
					]
				}
			}
		},
		{
			"id": 189,
			"name": "FocalPoint",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Focal point of an image asset"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 213,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 190,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 191,
							"name": "x",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Horizontal position expressed as float between 0 and 1"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 215,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 192,
							"name": "y",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Vertical position expressed as float between 0 and 1"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 217,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								191,
								192
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 213,
							"character": 25
						}
					]
				}
			}
		},
		{
			"id": 65,
			"name": "FullConnectParameters",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "The full options you can pass to the `connect` function"
			},
			"sources": [
				{
					"fileName": "connect.ts",
					"line": 59,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 66,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 73,
							"name": "contentAreaSidebarItems",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 127,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 74,
									"name": "contentAreaSidebarItems",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Use this function to declare new navigation items in the Content Area sidebar",
										"tags": [
											{
												"tag": "example",
												"text": "\nimport { connect } from 'datocms-plugins-sdk';\n\nconnect({\n  contentAreaSidebarItems(ctx: InitCtx) {\n    return [\n      {\n        id: 'welcome',\n        label: 'Welcome!',\n        icon: 'igloo',\n        placement: ['before', 'menuItems'],\n        pointsTo: {\n          pageId: 'welcome',\n        },\n      },\n    ];\n  },\n});\n\n"
											}
										]
									},
									"parameters": [
										{
											"id": 75,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 450,
												"name": "InitMetaAndMethods"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 136,
											"name": "ContentAreaSidebarItem"
										}
									}
								}
							]
						},
						{
							"id": 79,
							"name": "itemTypeSidebarPanes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 174,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 80,
									"name": "itemTypeSidebarPanes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Use this function to declare new sidebar panes to be shown when the user edits records of a particular model",
										"tags": [
											{
												"tag": "example",
												"text": "\nimport { connect } from 'datocms-plugins-sdk';\n\nconnect({\n  itemTypeSidebarPanes(model: ModelBlock, ctx: InitCtx) {\n    return [\n      {\n        id: 'preview',\n        label: 'Preview',\n        parameters: { foo: 'bar' },\n      },\n    ];\n  },\n});\n"
											}
										]
									},
									"parameters": [
										{
											"id": 81,
											"name": "itemType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 16,
												"name": "ModelBlock"
											}
										},
										{
											"id": 82,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 450,
												"name": "InitMetaAndMethods"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 156,
											"name": "SidebarPane"
										}
									}
								}
							]
						},
						{
							"id": 67,
							"name": "mainNavigationTabs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 79,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 68,
									"name": "mainNavigationTabs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Use this function to declare new tabs you want to add in the top-bar of the UI",
										"tags": [
											{
												"tag": "example",
												"text": "\nconnect({\n  mainNavigationTabs(ctx: InitCtx) {\n    return [\n      {\n        label: 'Analytics',\n        icon: 'analytics',\n        placement: ['before', 'content'],\n        pointsTo: {\n          pageId: 'analytics',\n        },\n      },\n    ];\n  },\n});\n"
											}
										]
									},
									"parameters": [
										{
											"id": 69,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 450,
												"name": "InitMetaAndMethods"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 114,
											"name": "MainNavigationTab"
										}
									}
								}
							]
						},
						{
							"id": 76,
							"name": "manualFieldExtensions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 155,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 77,
									"name": "manualFieldExtensions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Use this function to declare new field extensions that users will be able to install manually in some field",
										"tags": [
											{
												"tag": "example",
												"text": "\nimport { connect } from 'datocms-plugins-sdk';\n\nconnect({\n  manualFieldExtensions(ctx) {\n    return [\n      {\n        id: 'shopify',\n        name: 'Shopify product finder',\n        type: 'field_editor',\n        fieldTypes: ['string'],\n        configurable: true,\n      },\n      {\n        id: 'lorem',\n        name: 'Lorem Ipsum generator',\n        type: 'field_addon',\n        fieldTypes: ['string'],\n        configurable: false,\n      },\n    ];\n  },\n});\n"
											}
										]
									},
									"parameters": [
										{
											"id": 78,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 450,
												"name": "InitMetaAndMethods"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 146,
											"name": "FieldExtension"
										}
									}
								}
							]
						},
						{
							"id": 83,
							"name": "overrideFieldExtensions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 206,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 84,
									"name": "overrideFieldExtensions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Use this function to automatically force one or more field extensions to a particular field",
										"tags": [
											{
												"tag": "example",
												"text": "\nimport { connect } from 'datocms-plugins-sdk';\n\nconnect({\n  overrideFieldExtensions(field, { itemType }) {\n    if (\n      field.attributes.field_type !== 'string' ||\n      field.attributes.api_key !== 'title'\n    ) {\n      return undefined;\n    }\n\n    return {\n      editor: {\n        id: 'titleFieldEditor',\n        type: 'field_editor',\n        parameters: { foo: 'bar' },\n      },\n      addons: [\n        {\n          id: 'titleAddon',\n          parameters: { foo: 'bar' },\n        },\n      ],\n    };\n  },\n});\n"
											}
										]
									},
									"parameters": [
										{
											"id": 85,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 5,
												"name": "Field"
											}
										},
										{
											"id": 86,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 56,
												"name": "FieldInitCtx"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"id": 178,
												"name": "FieldExtensionOverride"
											}
										]
									}
								}
							]
						},
						{
							"id": 106,
							"name": "renderFieldExtension",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 238,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 107,
									"name": "renderFieldExtension",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function will be called when the plugin needs to render a field extension (see the `manualFieldExtensions` and `overrideFieldExtensions` functions)"
									},
									"parameters": [
										{
											"id": 108,
											"name": "fieldExtensionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 109,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 62,
												"name": "RenderFieldExtensionCtx"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 110,
							"name": "renderManualFieldExtensionParametersForm",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 240,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 111,
									"name": "renderManualFieldExtensionParametersForm",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function will be called when the plugin needs to render the configuration form for installing a field extension inside a particular field"
									},
									"parameters": [
										{
											"id": 112,
											"name": "fieldExtensionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 113,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 63,
												"name": "RenderManualFieldExtensionParametersFormCtx"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 98,
							"name": "renderModal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 234,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 99,
									"name": "renderModal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function will be called when the plugin requested to open a modal (see the `openModal` function)"
									},
									"parameters": [
										{
											"id": 100,
											"name": "modalId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 101,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 60,
												"name": "RenderModalCtx"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 94,
							"name": "renderPage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 232,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 95,
									"name": "renderPage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function will be called when the plugin needs to render a specific page (see the `mainNavigationTabs`, `settingsAreaSidebarItemGroups` and `contentAreaSidebarItems` functions)"
									},
									"parameters": [
										{
											"id": 96,
											"name": "pageId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 97,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 457,
												"name": "RenderPageMetaAndMethods"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 91,
							"name": "renderPluginParametersForm",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 230,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 92,
									"name": "renderPluginParametersForm",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function will be called when the plugin needs to render the plugin's configuration form"
									},
									"parameters": [
										{
											"id": 93,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 64,
												"name": "RenderPluginParametersFormCtx"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 102,
							"name": "renderSidebarPane",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 236,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 103,
									"name": "renderSidebarPane",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function will be called when the plugin needs to render a sidebar panel (see the `itemTypeSidebarPanes` function)"
									},
									"parameters": [
										{
											"id": 104,
											"name": "sidebarPaneId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 105,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 61,
												"name": "RenderSidebarPaneCtx"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 70,
							"name": "settingsAreaSidebarItemGroups",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 103,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 71,
									"name": "settingsAreaSidebarItemGroups",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Use this function to declare new navigation sections in the Settings Area sidebar",
										"tags": [
											{
												"tag": "example",
												"text": "\nconnect({\n  settingsAreaSidebarItemGroups(ctx: InitCtx) {\n    return [\n      {\n        label: 'Analytics',\n        items: [\n          {\n            label: 'Help',\n            icon: 'life-ring',\n            pointsTo: {\n              pageId: 'help',\n            },\n          },\n        ],\n      },\n    ];\n  },\n});\n"
											}
										]
									},
									"parameters": [
										{
											"id": 72,
											"name": "ctx",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 450,
												"name": "InitMetaAndMethods"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 130,
											"name": "SettingsAreaSidebarItemGroup"
										}
									}
								}
							]
						},
						{
							"id": 87,
							"name": "validateManualFieldExtensionParameters",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "connect.ts",
									"line": 225,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 88,
									"name": "validateManualFieldExtensionParameters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function will be called each time the configuration object changes. It must return an object containing possible validation errors",
										"tags": [
											{
												"tag": "example",
												"text": "\nimport { connect } from 'datocms-plugins-sdk';\n\nconnect({\n  async validateManualFieldExtensionParameters(fieldExtension, parameters) {\n    const errors: Record<string, string> = {};\n\n    if (!parameters.someRequiredParameter) {\n      errors.someRequiredParameter = 'required';\n    }\n\n    return errors;\n  },\n});\n"
											}
										]
									},
									"parameters": [
										{
											"id": 89,
											"name": "fieldExtensionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 90,
											"name": "parameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "unknown"
															}
														],
														"name": "Record"
													}
												],
												"name": "Promise"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								73,
								79,
								67,
								76,
								83,
								106,
								110,
								98,
								94,
								91,
								102,
								70,
								87
							]
						}
					],
					"sources": [
						{
							"fileName": "connect.ts",
							"line": 59,
							"character": 36
						}
					]
				}
			}
		},
		{
			"id": 55,
			"name": "InitCtx",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "connect.ts",
					"line": 47,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"id": 450,
				"name": "InitMetaAndMethods"
			}
		},
		{
			"id": 245,
			"name": "InitMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 320,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 230,
						"name": "CommonMeta"
					},
					{
						"type": "reference",
						"id": 242,
						"name": "InitMetaAdditions"
					}
				]
			}
		},
		{
			"id": 242,
			"name": "InitMetaAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 316,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 243,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 244,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 317,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "init"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								244
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 316,
							"character": 32
						}
					]
				}
			}
		},
		{
			"id": 450,
			"name": "InitMetaAndMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 25,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 246,
						"name": "InitMethods"
					},
					{
						"type": "reference",
						"id": 245,
						"name": "InitMeta"
					}
				]
			}
		},
		{
			"id": 246,
			"name": "InitMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 322,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 247,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 248,
							"name": "getSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 249,
									"name": "getSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 245,
												"name": "InitMeta"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								248
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 322,
							"character": 26
						}
					]
				}
			}
		},
		{
			"id": 114,
			"name": "MainNavigationTab",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A tab to be displayed in the top-bar of the UI"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 28,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 115,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 117,
							"name": "icon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "FontAwesome icon name to be shown alongside the label"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 32,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 116,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Label to be shown. Must be unique."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 30,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 121,
							"name": "placement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Expresses where you want to place the tab in the top-bar. If not specified, the tab will be placed after the standard tabs provided by DatoCMS itself."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 38,
									"character": 2
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "before"
											},
											{
												"type": "literal",
												"value": "after"
											}
										]
									},
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "content"
											},
											{
												"type": "literal",
												"value": "mediaArea"
											},
											{
												"type": "literal",
												"value": "apiExplorer"
											},
											{
												"type": "literal",
												"value": "settings"
											}
										]
									}
								]
							}
						},
						{
							"id": 118,
							"name": "pointsTo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "ID of the page linked to the tab"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 34,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 119,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 120,
											"name": "pageId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 35,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												120
											]
										}
									],
									"sources": [
										{
											"fileName": "types.ts",
											"line": 34,
											"character": 13
										}
									]
								}
							}
						},
						{
							"id": 122,
							"name": "rank",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If different plugins specify the same placement for their tab, they will be displayed by ascending `rank`. If you want to specify an explicit value for `rank`, make sure to offer a way for final users to customize it inside the plugin's settings form, otherwise the hardcoded value you choose might clash with the one of another plugin!"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 40,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								117,
								116,
								121,
								118,
								122
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 28,
							"character": 32
						}
					]
				}
			}
		},
		{
			"id": 200,
			"name": "Modal",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A modal to present to the user"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 238,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 201,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 204,
							"name": "closeDisabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to present a close button for the modal or not"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 244,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 202,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "ID of the modal. Will be the first argument for the `renderModal` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 240,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 207,
							"name": "initialHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The initial height to set for the iframe that will render the modal content"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 250,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 206,
							"name": "parameters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An arbitrary configuration object that will be passed as the `parameters` property of the second argument of the `renderModal` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 248,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 203,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Title for the modal. Ignored by `fullWidth` modals"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 242,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 205,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Width of the modal. Can be a number, or one of the predefined sizes"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 246,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "s"
									},
									{
										"type": "literal",
										"value": "m"
									},
									{
										"type": "literal",
										"value": "l"
									},
									{
										"type": "literal",
										"value": "xl"
									},
									{
										"type": "literal",
										"value": "fullWidth"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								204,
								202,
								207,
								206,
								203,
								205
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 238,
							"character": 20
						}
					]
				}
			}
		},
		{
			"id": 438,
			"name": "Parent",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 18,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 439,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 440,
							"name": "getSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "parentTypes.ts",
									"line": 18,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 441,
									"name": "getSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 442,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 443,
															"name": "mode",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "parentTypes.ts",
																	"line": 18,
																	"character": 52
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																443
															]
														}
													]
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								440
							]
						}
					],
					"sources": [
						{
							"fileName": "parentTypes.ts",
							"line": 18,
							"character": 21
						}
					]
				}
			}
		},
		{
			"id": 62,
			"name": "RenderFieldExtensionCtx",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "connect.ts",
					"line": 52,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 485,
						"name": "RenderFieldExtensionMetaAndMethods"
					},
					{
						"type": "reference",
						"name": "SizingUtilities"
					}
				]
			}
		},
		{
			"id": 376,
			"name": "RenderFieldExtensionMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 470,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 333,
						"name": "CommonRenderItemFormMeta"
					},
					{
						"type": "reference",
						"id": 366,
						"name": "RenderFieldExtensionMetaAdditions"
					}
				]
			}
		},
		{
			"id": 366,
			"name": "RenderFieldExtensionMetaAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 452,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 367,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 372,
							"name": "disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether the field is currently disabled or not"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 461,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 374,
							"name": "field",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The field where the field extension is installed to"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 465,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 5,
								"name": "Field"
							}
						},
						{
							"id": 369,
							"name": "fieldExtensionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ID of the field extension that needs to be rendered"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 455,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 373,
							"name": "fieldPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The path in the `formValues` object where to find the current value for the field"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 463,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 368,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 453,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "renderFieldExtension"
							}
						},
						{
							"id": 370,
							"name": "parameters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The arbitrary `parameters` of the field extension"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 457,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 375,
							"name": "parentField",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If the field extension is installed in a field of a block, returns the top level Modular Content/Structured Text field containing the block itself"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 467,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 5,
										"name": "Field"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 371,
							"name": "placeholder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The placeholder for the field"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 459,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								372,
								374,
								369,
								373,
								368,
								370,
								375,
								371
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 452,
							"character": 48
						}
					]
				}
			}
		},
		{
			"id": 485,
			"name": "RenderFieldExtensionMetaAndMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 45,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 381,
						"name": "RenderFieldExtensionMethods"
					},
					{
						"type": "reference",
						"id": 376,
						"name": "RenderFieldExtensionMeta"
					}
				]
			}
		},
		{
			"id": 381,
			"name": "RenderFieldExtensionMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 476,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 354,
						"name": "CommonRenderItemFormMethods"
					},
					{
						"type": "reference",
						"id": 377,
						"name": "RenderFieldExtensionMethodsAdditions"
					}
				]
			}
		},
		{
			"id": 377,
			"name": "RenderFieldExtensionMethodsAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 472,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 378,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 379,
							"name": "getSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 380,
									"name": "getSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 376,
												"name": "RenderFieldExtensionMeta"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								379
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 472,
							"character": 51
						}
					]
				}
			}
		},
		{
			"id": 63,
			"name": "RenderManualFieldExtensionParametersFormCtx",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "connect.ts",
					"line": 53,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 492,
						"name": "RenderManualFieldExtensionParametersFormMetaAndMethods"
					},
					{
						"type": "reference",
						"name": "SizingUtilities"
					}
				]
			}
		},
		{
			"id": 412,
			"name": "RenderManualFieldExtensionParametersFormMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 521,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 257,
						"name": "CommonRenderMeta"
					},
					{
						"type": "reference",
						"id": 406,
						"name": "RenderManualFieldExtensionParametersFormMetaAdditions"
					}
				]
			}
		},
		{
			"id": 406,
			"name": "RenderManualFieldExtensionParametersFormMetaAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 511,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 407,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 411,
							"name": "errors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The current validation errors for the parameters (you can set them implementing the `validateManualFieldExtensionParameters` function)"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 518,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 409,
							"name": "fieldExtensionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ID of the field extension for which we need to render the parameters form"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 514,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 408,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 512,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "renderManualFieldExtensionParametersForm"
							}
						},
						{
							"id": 410,
							"name": "parameters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The current value of the parameters (you can change the value with the `setParameters` function)"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 516,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								411,
								409,
								408,
								410
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 511,
							"character": 68
						}
					]
				}
			}
		},
		{
			"id": 492,
			"name": "RenderManualFieldExtensionParametersFormMetaAndMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 51,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 420,
						"name": "RenderManualFieldExtensionParametersFormMethods"
					},
					{
						"type": "reference",
						"id": 412,
						"name": "RenderManualFieldExtensionParametersFormMeta"
					}
				]
			}
		},
		{
			"id": 420,
			"name": "RenderManualFieldExtensionParametersFormMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 530,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 258,
						"name": "CommonRenderMethods"
					},
					{
						"type": "reference",
						"id": 413,
						"name": "RenderManualFieldExtensionParametersFormMethodsAdditions"
					}
				]
			}
		},
		{
			"id": 413,
			"name": "RenderManualFieldExtensionParametersFormMethodsAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 524,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 414,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 415,
							"name": "getSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 416,
									"name": "getSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 412,
												"name": "RenderManualFieldExtensionParametersFormMeta"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 417,
							"name": "setParameters",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 418,
									"name": "setParameters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a new value for the parameters"
									},
									"parameters": [
										{
											"id": 419,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								415,
								417
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 524,
							"character": 71
						}
					]
				}
			}
		},
		{
			"id": 60,
			"name": "RenderModalCtx",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "connect.ts",
					"line": 50,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 471,
						"name": "RenderModalMetaAndMethods"
					},
					{
						"type": "reference",
						"name": "SizingUtilities"
					}
				]
			}
		},
		{
			"id": 387,
			"name": "RenderModalMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 487,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 257,
						"name": "CommonRenderMeta"
					},
					{
						"type": "reference",
						"id": 382,
						"name": "RenderModalMetaAdditions"
					}
				]
			}
		},
		{
			"id": 382,
			"name": "RenderModalMetaAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 479,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 383,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 385,
							"name": "modalId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ID of the modal that needs to be rendered"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 482,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 384,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 480,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "renderModal"
							}
						},
						{
							"id": 386,
							"name": "parameters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The arbitrary `parameters` of the modal declared in the `openModal` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 484,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								385,
								384,
								386
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 479,
							"character": 39
						}
					]
				}
			}
		},
		{
			"id": 471,
			"name": "RenderModalMetaAndMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 37,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 395,
						"name": "RenderModalMethods"
					},
					{
						"type": "reference",
						"id": 387,
						"name": "RenderModalMeta"
					}
				]
			}
		},
		{
			"id": 395,
			"name": "RenderModalMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 495,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 258,
						"name": "CommonRenderMethods"
					},
					{
						"type": "reference",
						"id": 388,
						"name": "RenderModalMethodsAdditions"
					}
				]
			}
		},
		{
			"id": 388,
			"name": "RenderModalMethodsAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 489,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 389,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 390,
							"name": "getSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 391,
									"name": "getSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 387,
												"name": "RenderModalMeta"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 392,
							"name": "resolve",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 393,
									"name": "resolve",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A function to be called by the plugin to close the modal. The `openModal` call will be resolved with the passed return value"
									},
									"parameters": [
										{
											"id": 394,
											"name": "returnValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								390,
								392
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 489,
							"character": 42
						}
					]
				}
			}
		},
		{
			"id": 59,
			"name": "RenderPageCtx",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "connect.ts",
					"line": 49,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"id": 457,
				"name": "RenderPageMetaAndMethods"
			}
		},
		{
			"id": 400,
			"name": "RenderPageMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 503,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 257,
						"name": "CommonRenderMeta"
					},
					{
						"type": "reference",
						"id": 396,
						"name": "RenderPageMetaAdditions"
					}
				]
			}
		},
		{
			"id": 396,
			"name": "RenderPageMetaAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 497,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 397,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 398,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 498,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "renderPage"
							}
						},
						{
							"id": 399,
							"name": "pageId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ID of the page that needs to be rendered"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 500,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								398,
								399
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 497,
							"character": 38
						}
					]
				}
			}
		},
		{
			"id": 457,
			"name": "RenderPageMetaAndMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 28,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 405,
						"name": "RenderPageMethods"
					},
					{
						"type": "reference",
						"id": 400,
						"name": "RenderPageMeta"
					}
				]
			}
		},
		{
			"id": 405,
			"name": "RenderPageMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 509,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 258,
						"name": "CommonRenderMethods"
					},
					{
						"type": "reference",
						"id": 401,
						"name": "RenderPageMethodsAdditions"
					}
				]
			}
		},
		{
			"id": 401,
			"name": "RenderPageMethodsAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 505,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 402,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 403,
							"name": "getSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 404,
									"name": "getSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 400,
												"name": "RenderPageMeta"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								403
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 505,
							"character": 41
						}
					]
				}
			}
		},
		{
			"id": 64,
			"name": "RenderPluginParametersFormCtx",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "connect.ts",
					"line": 55,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 464,
						"name": "RenderPluginParametersFormMetaAndMethods"
					},
					{
						"type": "reference",
						"name": "SizingUtilities"
					}
				]
			}
		},
		{
			"id": 424,
			"name": "RenderPluginParametersFormMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 537,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 257,
						"name": "CommonRenderMeta"
					},
					{
						"type": "reference",
						"id": 421,
						"name": "RenderPluginParametersFormMetaAdditions"
					}
				]
			}
		},
		{
			"id": 421,
			"name": "RenderPluginParametersFormMetaAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 533,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 422,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 423,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 534,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "renderPluginParametersForm"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								423
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 533,
							"character": 54
						}
					]
				}
			}
		},
		{
			"id": 464,
			"name": "RenderPluginParametersFormMetaAndMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 33,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 432,
						"name": "RenderPluginParametersFormMethods"
					},
					{
						"type": "reference",
						"id": 424,
						"name": "RenderPluginParametersFormMeta"
					}
				]
			}
		},
		{
			"id": 432,
			"name": "RenderPluginParametersFormMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 546,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 258,
						"name": "CommonRenderMethods"
					},
					{
						"type": "reference",
						"id": 425,
						"name": "RenderPluginParametersFormMethodsAdditions"
					}
				]
			}
		},
		{
			"id": 425,
			"name": "RenderPluginParametersFormMethodsAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 540,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 426,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 427,
							"name": "getSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 428,
									"name": "getSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 424,
												"name": "RenderPluginParametersFormMeta"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 429,
							"name": "save",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 430,
									"name": "save",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A function to be called by the plugin to persist some changes to the parameters of the plugin"
									},
									"parameters": [
										{
											"id": 431,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								427,
								429
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 540,
							"character": 57
						}
					]
				}
			}
		},
		{
			"id": 61,
			"name": "RenderSidebarPaneCtx",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "connect.ts",
					"line": 51,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 478,
						"name": "RenderSidebarPaneMetaAndMethods"
					},
					{
						"type": "reference",
						"name": "SizingUtilities"
					}
				]
			}
		},
		{
			"id": 360,
			"name": "RenderSidebarPaneMeta",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 443,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 333,
						"name": "CommonRenderItemFormMeta"
					},
					{
						"type": "reference",
						"id": 355,
						"name": "RenderSidebarPaneMetaAdditions"
					}
				]
			}
		},
		{
			"id": 355,
			"name": "RenderSidebarPaneMetaAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 435,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 356,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 357,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 436,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "renderSidebarPane"
							}
						},
						{
							"id": 359,
							"name": "parameters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The arbitrary `parameters` of the panel declared in the `itemTypeSidebarPanes` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 440,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 358,
							"name": "sidebarPaneId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ID of the sidebar pane that needs to be rendered"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 438,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								357,
								359,
								358
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 435,
							"character": 45
						}
					]
				}
			}
		},
		{
			"id": 478,
			"name": "RenderSidebarPaneMetaAndMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 40,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 365,
						"name": "RenderSidebarPaneMethods"
					},
					{
						"type": "reference",
						"id": 360,
						"name": "RenderSidebarPaneMeta"
					}
				]
			}
		},
		{
			"id": 365,
			"name": "RenderSidebarPaneMethods",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 449,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 354,
						"name": "CommonRenderItemFormMethods"
					},
					{
						"type": "reference",
						"id": 361,
						"name": "RenderSidebarPaneMethodsAdditions"
					}
				]
			}
		},
		{
			"id": 361,
			"name": "RenderSidebarPaneMethodsAdditions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 445,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 362,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 363,
							"name": "getSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 364,
									"name": "getSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 360,
												"name": "RenderSidebarPaneMeta"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								363
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 445,
							"character": 48
						}
					]
				}
			}
		},
		{
			"id": 123,
			"name": "SettingsAreaSidebarItem",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "An item contained in a Settings Area group"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 49,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 124,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 126,
							"name": "icon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "FontAwesome icon name to be shown alongside the label"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 53,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 125,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Label to be shown. Must be unique."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 51,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 127,
							"name": "pointsTo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "ID of the page linked to the item"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 55,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 128,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 129,
											"name": "pageId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 56,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												129
											]
										}
									],
									"sources": [
										{
											"fileName": "types.ts",
											"line": 55,
											"character": 13
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								126,
								125,
								127
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 49,
							"character": 38
						}
					]
				}
			}
		},
		{
			"id": 130,
			"name": "SettingsAreaSidebarItemGroup",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "The sidebar in the Settings Area presents a number of pages grouped by topic. This object represents a new group to be added in the sideebar to the standard ones DatoCMS provides."
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 61,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 131,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 133,
							"name": "items",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of items it contains"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 65,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 123,
									"name": "SettingsAreaSidebarItem"
								}
							}
						},
						{
							"id": 132,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Label to be shown. Must be unique."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 63,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 134,
							"name": "placement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Expresses where you want the group to be placed inside the sidebar. If not specified, the item will be placed after the standard items provided by DatoCMS itself."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 67,
									"character": 2
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "before"
											},
											{
												"type": "literal",
												"value": "after"
											}
										]
									},
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "environment"
											},
											{
												"type": "literal",
												"value": "project"
											},
											{
												"type": "literal",
												"value": "permissions"
											},
											{
												"type": "literal",
												"value": "webhooks"
											},
											{
												"type": "literal",
												"value": "deployment"
											},
											{
												"type": "literal",
												"value": "sso"
											},
											{
												"type": "literal",
												"value": "auditLog"
											},
											{
												"type": "literal",
												"value": "usage"
											}
										]
									}
								]
							}
						},
						{
							"id": 135,
							"name": "rank",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If different plugins specify the same placement for their sections, they will be displayed by ascending `rank`. If you want to specify an explicit value for `rank`, make sure to offer a way for final users to customize it inside the plugin's settings form, otherwise the hardcoded value you choose might clash with the one of another plugin!"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 81,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								133,
								132,
								134,
								135
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 61,
							"character": 43
						}
					]
				}
			}
		},
		{
			"id": 156,
			"name": "SidebarPane",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A sidebar pane to be shown inside the record's editing page"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 147,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 157,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 158,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "ID of the pane. Will be the first argument for the `renderSidebarPane` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 149,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 163,
							"name": "initialHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The initial height to set for the iframe that will render the sidebar pane"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 159,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 159,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Label to be shown on the collapsible sidebar pane handle"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 151,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 160,
							"name": "parameters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An arbitrary configuration object that will be passed as the `parameters` property of the second argument of the `renderSidebarPane` function"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 153,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 162,
							"name": "rank",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If multiple sidebar panes are present, they will be sorted by ascending `rank`. If you want to specify an explicit value for `rank`, make sure to offer a way for final users to customize it inside the plugin's settings form, otherwise the hardcoded value you choose might clash with the one of another plugin!"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 157,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 161,
							"name": "startOpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the sidebar pane will start open or collapsed"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 155,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								158,
								163,
								159,
								160,
								162,
								161
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 147,
							"character": 26
						}
					]
				}
			}
		},
		{
			"id": 182,
			"name": "Theme",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "An object containing the theme colors for the current DatoCMS project"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 204,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 183,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 185,
							"name": "accentColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 206,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 188,
							"name": "darkColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 209,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 187,
							"name": "lightColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 208,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 184,
							"name": "primaryColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 205,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 186,
							"name": "semiTransparentAccentColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 207,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								185,
								188,
								187,
								184,
								186
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 204,
							"character": 20
						}
					]
				}
			}
		},
		{
			"id": 208,
			"name": "Toast",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A toast notification to present to the user"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 254,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 218,
					"name": "CtaValue",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 209,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 212,
							"name": "cta",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "An optional button to show inside the toast"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 260,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 213,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 214,
											"name": "label",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Label for the button"
											},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 262,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 215,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The value to be returned by the `customToast` promise if the button is clicked by the user"
											},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 264,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"id": 218,
												"name": "CtaValue"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												214,
												215
											]
										}
									],
									"sources": [
										{
											"fileName": "types.ts",
											"line": 260,
											"character": 8
										}
									]
								}
							}
						},
						{
							"id": 217,
							"name": "dismissAfterTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the toast is to be automatically closed after some time (`true` will use the default DatoCMS time interval)"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 269,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 216,
							"name": "dismissOnPageChange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the toast is to be automatically closed if the user changes page"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 267,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 210,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Message of the notification"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 256,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 211,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Type of notification.  Will present the toast in a different color accent."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 258,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "notice"
									},
									{
										"type": "literal",
										"value": "alert"
									},
									{
										"type": "literal",
										"value": "warning"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								212,
								217,
								216,
								210,
								211
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 254,
							"character": 40
						}
					]
				}
			}
		},
		{
			"id": 52,
			"name": "connect",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "connect.ts",
					"line": 330,
					"character": 22
				}
			],
			"signatures": [
				{
					"id": 53,
					"name": "connect",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 54,
							"name": "configuration",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 65,
										"name": "FullConnectParameters"
									}
								],
								"name": "Partial"
							},
							"defaultValue": "{}"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 444,
			"name": "isInitParent",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 24,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 445,
					"name": "isInitParent",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 446,
							"name": "parent",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 438,
								"name": "Parent"
							}
						},
						{
							"id": 447,
							"name": "settings",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 448,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 449,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "parentTypes.ts",
													"line": 21,
													"character": 38
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												449
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "parent",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"id": 246,
							"name": "InitMethods"
						}
					}
				}
			]
		},
		{
			"id": 479,
			"name": "isRenderFieldExtensionParent",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 42,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 480,
					"name": "isRenderFieldExtensionParent",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 481,
							"name": "parent",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 438,
								"name": "Parent"
							}
						},
						{
							"id": 482,
							"name": "settings",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 483,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 484,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "parentTypes.ts",
													"line": 21,
													"character": 38
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												484
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "parent",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"id": 381,
							"name": "RenderFieldExtensionMethods"
						}
					}
				}
			]
		},
		{
			"id": 486,
			"name": "isRenderManualFieldExtensionParametersFormParent",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 48,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 487,
					"name": "isRenderManualFieldExtensionParametersFormParent",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 488,
							"name": "parent",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 438,
								"name": "Parent"
							}
						},
						{
							"id": 489,
							"name": "settings",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 490,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 491,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "parentTypes.ts",
													"line": 21,
													"character": 38
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												491
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "parent",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"id": 420,
							"name": "RenderManualFieldExtensionParametersFormMethods"
						}
					}
				}
			]
		},
		{
			"id": 465,
			"name": "isRenderModalParent",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 36,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 466,
					"name": "isRenderModalParent",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 467,
							"name": "parent",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 438,
								"name": "Parent"
							}
						},
						{
							"id": 468,
							"name": "settings",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 469,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 470,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "parentTypes.ts",
													"line": 21,
													"character": 38
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												470
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "parent",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"id": 395,
							"name": "RenderModalMethods"
						}
					}
				}
			]
		},
		{
			"id": 451,
			"name": "isRenderPageParent",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 27,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 452,
					"name": "isRenderPageParent",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 453,
							"name": "parent",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 438,
								"name": "Parent"
							}
						},
						{
							"id": 454,
							"name": "settings",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 455,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 456,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "parentTypes.ts",
													"line": 21,
													"character": 38
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												456
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "parent",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"id": 405,
							"name": "RenderPageMethods"
						}
					}
				}
			]
		},
		{
			"id": 458,
			"name": "isRenderPluginParametersFormParent",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 30,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 459,
					"name": "isRenderPluginParametersFormParent",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 460,
							"name": "parent",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 438,
								"name": "Parent"
							}
						},
						{
							"id": 461,
							"name": "settings",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 462,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 463,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "parentTypes.ts",
													"line": 21,
													"character": 38
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												463
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "parent",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"id": 432,
							"name": "RenderPluginParametersFormMethods"
						}
					}
				}
			]
		},
		{
			"id": 472,
			"name": "isRenderSidebarPaneParent",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "parentTypes.ts",
					"line": 39,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 473,
					"name": "isRenderSidebarPaneParent",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 474,
							"name": "parent",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 438,
								"name": "Parent"
							}
						},
						{
							"id": 475,
							"name": "settings",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 476,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 477,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "parentTypes.ts",
													"line": 21,
													"character": 38
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												477
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "parent",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"id": 365,
							"name": "RenderSidebarPaneMethods"
						}
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				1,
				5,
				10,
				16,
				21,
				46,
				26,
				31,
				36,
				41
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				172,
				230,
				333,
				324,
				354,
				334,
				257,
				250,
				258,
				219,
				224,
				136,
				164,
				146,
				178,
				145,
				56,
				437,
				433,
				193,
				189,
				65,
				55,
				245,
				242,
				450,
				246,
				114,
				200,
				438,
				62,
				376,
				366,
				485,
				381,
				377,
				63,
				412,
				406,
				492,
				420,
				413,
				60,
				387,
				382,
				471,
				395,
				388,
				59,
				400,
				396,
				457,
				405,
				401,
				64,
				424,
				421,
				464,
				432,
				425,
				61,
				360,
				355,
				478,
				365,
				361,
				123,
				130,
				156,
				182,
				208
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				52,
				444,
				479,
				486,
				465,
				451,
				458,
				472
			]
		}
	],
	"sources": [
		{
			"fileName": "index.ts",
			"line": 1,
			"character": 0
		}
	]
}